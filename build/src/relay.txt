def @main(%x: Tensor[(1, 3, 32, 320), float32], %conv2d_0.w_0: Tensor[(11, 3, 3, 3), float32], %batch_norm_0.w_0: Tensor[(11), float32], %batch_norm_0.b_0: Tensor[(11), float32], %batch_norm_0.w_1: Tensor[(11), float32], %batch_norm_0.w_2: Tensor[(11), float32], %conv2d_1.w_0: Tensor[(11, 1, 3, 3), float32], %batch_norm_1.w_0: Tensor[(11), float32], %batch_norm_1.b_0: Tensor[(11), float32], %batch_norm_1.w_1: Tensor[(11), float32], %batch_norm_1.w_2: Tensor[(11), float32], %conv2d_2.w_0: Tensor[(22, 11, 1, 1), float32], %batch_norm_2.w_0: Tensor[(22), float32], %batch_norm_2.b_0: Tensor[(22), float32], %batch_norm_2.w_1: Tensor[(22), float32], %batch_norm_2.w_2: Tensor[(22), float32], %conv2d_3.w_0: Tensor[(22, 1, 3, 3), float32], %batch_norm_3.w_0: Tensor[(22), float32], %batch_norm_3.b_0: Tensor[(22), float32], %batch_norm_3.w_1: Tensor[(22), float32], %batch_norm_3.w_2: Tensor[(22), float32], %conv2d_4.w_0: Tensor[(44, 22, 1, 1), float32], %batch_norm_4.w_0: Tensor[(44), float32], %batch_norm_4.b_0: Tensor[(44), float32], %batch_norm_4.w_1: Tensor[(44), float32], %batch_norm_4.w_2: Tensor[(44), float32], %conv2d_5.w_0: Tensor[(44, 1, 3, 3), float32], %batch_norm_5.w_0: Tensor[(44), float32], %batch_norm_5.b_0: Tensor[(44), float32], %batch_norm_5.w_1: Tensor[(44), float32], %batch_norm_5.w_2: Tensor[(44), float32], %conv2d_6.w_0: Tensor[(44, 44, 1, 1), float32], %batch_norm_6.w_0: Tensor[(44), float32], %batch_norm_6.b_0: Tensor[(44), float32], %batch_norm_6.w_1: Tensor[(44), float32], %batch_norm_6.w_2: Tensor[(44), float32], %conv2d_7.w_0: Tensor[(44, 1, 3, 3), float32], %batch_norm_7.w_0: Tensor[(44), float32], %batch_norm_7.b_0: Tensor[(44), float32], %batch_norm_7.w_1: Tensor[(44), float32], %batch_norm_7.w_2: Tensor[(44), float32], %conv2d_8.w_0: Tensor[(89, 44, 1, 1), float32], %batch_norm_8.w_0: Tensor[(89), float32], %batch_norm_8.b_0: Tensor[(89), float32], %batch_norm_8.w_1: Tensor[(89), float32], %batch_norm_8.w_2: Tensor[(89), float32], %conv2d_9.w_0: Tensor[(89, 1, 3, 3), float32], %batch_norm_9.w_0: Tensor[(89), float32], %batch_norm_9.b_0: Tensor[(89), float32], %batch_norm_9.w_1: Tensor[(89), float32], %batch_norm_9.w_2: Tensor[(89), float32], %conv2d_10.w_0: Tensor[(89, 89, 1, 1), float32], %batch_norm_10.w_0: Tensor[(89), float32], %batch_norm_10.b_0: Tensor[(89), float32], %batch_norm_10.w_1: Tensor[(89), float32], %batch_norm_10.w_2: Tensor[(89), float32], %conv2d_11.w_0: Tensor[(89, 1, 3, 3), float32], %batch_norm_11.w_0: Tensor[(89), float32], %batch_norm_11.b_0: Tensor[(89), float32], %batch_norm_11.w_1: Tensor[(89), float32], %batch_norm_11.w_2: Tensor[(89), float32], %conv2d_12.w_0: Tensor[(179, 89, 1, 1), float32], %batch_norm_12.w_0: Tensor[(179), float32], %batch_norm_12.b_0: Tensor[(179), float32], %batch_norm_12.w_1: Tensor[(179), float32], %batch_norm_12.w_2: Tensor[(179), float32], %conv2d_13.w_0: Tensor[(179, 1, 5, 5), float32], %batch_norm_13.w_0: Tensor[(179), float32], %batch_norm_13.b_0: Tensor[(179), float32], %batch_norm_13.w_1: Tensor[(179), float32], %batch_norm_13.w_2: Tensor[(179), float32], %conv2d_14.w_0: Tensor[(179, 179, 1, 1), float32], %batch_norm_14.w_0: Tensor[(179), float32], %batch_norm_14.b_0: Tensor[(179), float32], %batch_norm_14.w_1: Tensor[(179), float32], %batch_norm_14.w_2: Tensor[(179), float32], %conv2d_15.w_0: Tensor[(179, 1, 5, 5), float32], %batch_norm_15.w_0: Tensor[(179), float32], %batch_norm_15.b_0: Tensor[(179), float32], %batch_norm_15.w_1: Tensor[(179), float32], %batch_norm_15.w_2: Tensor[(179), float32], %conv2d_16.w_0: Tensor[(179, 179, 1, 1), float32], %batch_norm_16.w_0: Tensor[(179), float32], %batch_norm_16.b_0: Tensor[(179), float32], %batch_norm_16.w_1: Tensor[(179), float32], %batch_norm_16.w_2: Tensor[(179), float32], %conv2d_17.w_0: Tensor[(179, 1, 5, 5), float32], %batch_norm_17.w_0: Tensor[(179), float32], %batch_norm_17.b_0: Tensor[(179), float32], %batch_norm_17.w_1: Tensor[(179), float32], %batch_norm_17.w_2: Tensor[(179), float32], %conv2d_18.w_0: Tensor[(179, 179, 1, 1), float32], %batch_norm_18.w_0: Tensor[(179), float32], %batch_norm_18.b_0: Tensor[(179), float32], %batch_norm_18.w_1: Tensor[(179), float32], %batch_norm_18.w_2: Tensor[(179), float32], %conv2d_19.w_0: Tensor[(179, 1, 5, 5), float32], %batch_norm_19.w_0: Tensor[(179), float32], %batch_norm_19.b_0: Tensor[(179), float32], %batch_norm_19.w_1: Tensor[(179), float32], %batch_norm_19.w_2: Tensor[(179), float32], %conv2d_20.w_0: Tensor[(179, 179, 1, 1), float32], %batch_norm_20.w_0: Tensor[(179), float32], %batch_norm_20.b_0: Tensor[(179), float32], %batch_norm_20.w_1: Tensor[(179), float32], %batch_norm_20.w_2: Tensor[(179), float32], %conv2d_21.w_0: Tensor[(179, 1, 5, 5), float32], %batch_norm_21.w_0: Tensor[(179), float32], %batch_norm_21.b_0: Tensor[(179), float32], %batch_norm_21.w_1: Tensor[(179), float32], %batch_norm_21.w_2: Tensor[(179), float32], %conv2d_22.w_0: Tensor[(179, 179, 1, 1), float32], %batch_norm_22.w_0: Tensor[(179), float32], %batch_norm_22.b_0: Tensor[(179), float32], %batch_norm_22.w_1: Tensor[(179), float32], %batch_norm_22.w_2: Tensor[(179), float32], %conv2d_23.w_0: Tensor[(179, 1, 5, 5), float32], %batch_norm_23.w_0: Tensor[(179), float32], %batch_norm_23.b_0: Tensor[(179), float32], %batch_norm_23.w_1: Tensor[(179), float32], %batch_norm_23.w_2: Tensor[(179), float32], %conv2d_24.w_0: Tensor[(44, 179, 1, 1), float32], %conv2d_24.b_0: Tensor[(44), float32], %conv2d_25.w_0: Tensor[(179, 44, 1, 1), float32], %conv2d_25.b_0: Tensor[(179), float32], %conv2d_26.w_0: Tensor[(358, 179, 1, 1), float32], %batch_norm_24.w_0: Tensor[(358), float32], %batch_norm_24.b_0: Tensor[(358), float32], %batch_norm_24.w_1: Tensor[(358), float32], %batch_norm_24.w_2: Tensor[(358), float32], %conv2d_27.w_0: Tensor[(358, 1, 5, 5), float32], %batch_norm_25.w_0: Tensor[(358), float32], %batch_norm_25.b_0: Tensor[(358), float32], %batch_norm_25.w_1: Tensor[(358), float32], %batch_norm_25.w_2: Tensor[(358), float32], %conv2d_28.w_0: Tensor[(89, 358, 1, 1), float32], %conv2d_28.b_0: Tensor[(89), float32], %conv2d_29.w_0: Tensor[(358, 89, 1, 1), float32], %conv2d_29.b_0: Tensor[(358), float32], %conv2d_30.w_0: Tensor[(358, 358, 1, 1), float32], %batch_norm_26.w_0: Tensor[(358), float32], %batch_norm_26.b_0: Tensor[(358), float32], %batch_norm_26.w_1: Tensor[(358), float32], %batch_norm_26.w_2: Tensor[(358), float32], %linear_0.w_0: Tensor[(358, 97), float32], %linear_0.b_0: Tensor[(97), float32]) {
  %0 = nn.conv2d(%x, %conv2d_0.w_0, strides=[2, 2], padding=[1, 1, 1, 1], channels=11, kernel_size=[3, 3]);
  %1 = nn.batch_norm(%0, %batch_norm_0.w_0, %batch_norm_0.b_0, %batch_norm_0.w_1, %batch_norm_0.w_2);
  %2 = %1.0;
  %3 = clip(%2, a_min=-3f, a_max=3f);
  %4 = divide(%3, 6f);
  %5 = add(%4, 0.5f);
  %6 = multiply(%2, %5);
  %7 = nn.conv2d(%6, %conv2d_1.w_0, padding=[1, 1, 1, 1], groups=11, channels=11, kernel_size=[3, 3]);
  %8 = nn.batch_norm(%7, %batch_norm_1.w_0, %batch_norm_1.b_0, %batch_norm_1.w_1, %batch_norm_1.w_2);
  %9 = %8.0;
  %10 = clip(%9, a_min=-3f, a_max=3f);
  %11 = divide(%10, 6f);
  %12 = add(%11, 0.5f);
  %13 = multiply(%9, %12);
  %14 = nn.conv2d(%13, %conv2d_2.w_0, padding=[0, 0, 0, 0], channels=22, kernel_size=[1, 1]);
  %15 = nn.batch_norm(%14, %batch_norm_2.w_0, %batch_norm_2.b_0, %batch_norm_2.w_1, %batch_norm_2.w_2);
  %16 = %15.0;
  %17 = clip(%16, a_min=-3f, a_max=3f);
  %18 = divide(%17, 6f);
  %19 = add(%18, 0.5f);
  %20 = multiply(%16, %19);
  %21 = nn.conv2d(%20, %conv2d_3.w_0, padding=[1, 1, 1, 1], groups=22, channels=22, kernel_size=[3, 3]);
  %22 = nn.batch_norm(%21, %batch_norm_3.w_0, %batch_norm_3.b_0, %batch_norm_3.w_1, %batch_norm_3.w_2);
  %23 = %22.0;
  %24 = clip(%23, a_min=-3f, a_max=3f);
  %25 = divide(%24, 6f);
  %26 = add(%25, 0.5f);
  %27 = multiply(%23, %26);
  %28 = nn.conv2d(%27, %conv2d_4.w_0, padding=[0, 0, 0, 0], channels=44, kernel_size=[1, 1]);
  %29 = nn.batch_norm(%28, %batch_norm_4.w_0, %batch_norm_4.b_0, %batch_norm_4.w_1, %batch_norm_4.w_2);
  %30 = %29.0;
  %31 = clip(%30, a_min=-3f, a_max=3f);
  %32 = divide(%31, 6f);
  %33 = add(%32, 0.5f);
  %34 = multiply(%30, %33);
  %35 = nn.conv2d(%34, %conv2d_5.w_0, padding=[1, 1, 1, 1], groups=44, channels=44, kernel_size=[3, 3]);
  %36 = nn.batch_norm(%35, %batch_norm_5.w_0, %batch_norm_5.b_0, %batch_norm_5.w_1, %batch_norm_5.w_2);
  %37 = %36.0;
  %38 = clip(%37, a_min=-3f, a_max=3f);
  %39 = divide(%38, 6f);
  %40 = add(%39, 0.5f);
  %41 = multiply(%37, %40);
  %42 = nn.conv2d(%41, %conv2d_6.w_0, padding=[0, 0, 0, 0], channels=44, kernel_size=[1, 1]);
  %43 = nn.batch_norm(%42, %batch_norm_6.w_0, %batch_norm_6.b_0, %batch_norm_6.w_1, %batch_norm_6.w_2);
  %44 = %43.0;
  %45 = clip(%44, a_min=-3f, a_max=3f);
  %46 = divide(%45, 6f);
  %47 = add(%46, 0.5f);
  %48 = multiply(%44, %47);
  %49 = nn.conv2d(%48, %conv2d_7.w_0, strides=[2, 1], padding=[1, 1, 1, 1], groups=44, channels=44, kernel_size=[3, 3]);
  %50 = nn.batch_norm(%49, %batch_norm_7.w_0, %batch_norm_7.b_0, %batch_norm_7.w_1, %batch_norm_7.w_2);
  %51 = %50.0;
  %52 = clip(%51, a_min=-3f, a_max=3f);
  %53 = divide(%52, 6f);
  %54 = add(%53, 0.5f);
  %55 = multiply(%51, %54);
  %56 = nn.conv2d(%55, %conv2d_8.w_0, padding=[0, 0, 0, 0], channels=89, kernel_size=[1, 1]);
  %57 = nn.batch_norm(%56, %batch_norm_8.w_0, %batch_norm_8.b_0, %batch_norm_8.w_1, %batch_norm_8.w_2);
  %58 = %57.0;
  %59 = clip(%58, a_min=-3f, a_max=3f);
  %60 = divide(%59, 6f);
  %61 = add(%60, 0.5f);
  %62 = multiply(%58, %61);
  %63 = nn.conv2d(%62, %conv2d_9.w_0, padding=[1, 1, 1, 1], groups=89, channels=89, kernel_size=[3, 3]);
  %64 = nn.batch_norm(%63, %batch_norm_9.w_0, %batch_norm_9.b_0, %batch_norm_9.w_1, %batch_norm_9.w_2);
  %65 = %64.0;
  %66 = clip(%65, a_min=-3f, a_max=3f);
  %67 = divide(%66, 6f);
  %68 = add(%67, 0.5f);
  %69 = multiply(%65, %68);
  %70 = nn.conv2d(%69, %conv2d_10.w_0, padding=[0, 0, 0, 0], channels=89, kernel_size=[1, 1]);
  %71 = nn.batch_norm(%70, %batch_norm_10.w_0, %batch_norm_10.b_0, %batch_norm_10.w_1, %batch_norm_10.w_2);
  %72 = %71.0;
  %73 = clip(%72, a_min=-3f, a_max=3f);
  %74 = divide(%73, 6f);
  %75 = add(%74, 0.5f);
  %76 = multiply(%72, %75);
  %77 = nn.conv2d(%76, %conv2d_11.w_0, strides=[2, 1], padding=[1, 1, 1, 1], groups=89, channels=89, kernel_size=[3, 3]);
  %78 = nn.batch_norm(%77, %batch_norm_11.w_0, %batch_norm_11.b_0, %batch_norm_11.w_1, %batch_norm_11.w_2);
  %79 = %78.0;
  %80 = clip(%79, a_min=-3f, a_max=3f);
  %81 = divide(%80, 6f);
  %82 = add(%81, 0.5f);
  %83 = multiply(%79, %82);
  %84 = nn.conv2d(%83, %conv2d_12.w_0, padding=[0, 0, 0, 0], channels=179, kernel_size=[1, 1]);
  %85 = nn.batch_norm(%84, %batch_norm_12.w_0, %batch_norm_12.b_0, %batch_norm_12.w_1, %batch_norm_12.w_2);
  %86 = %85.0;
  %87 = clip(%86, a_min=-3f, a_max=3f);
  %88 = divide(%87, 6f);
  %89 = add(%88, 0.5f);
  %90 = multiply(%86, %89);
  %91 = nn.conv2d(%90, %conv2d_13.w_0, padding=[2, 2, 2, 2], groups=179, channels=179, kernel_size=[5, 5]);
  %92 = nn.batch_norm(%91, %batch_norm_13.w_0, %batch_norm_13.b_0, %batch_norm_13.w_1, %batch_norm_13.w_2);
  %93 = %92.0;
  %94 = clip(%93, a_min=-3f, a_max=3f);
  %95 = divide(%94, 6f);
  %96 = add(%95, 0.5f);
  %97 = multiply(%93, %96);
  %98 = nn.conv2d(%97, %conv2d_14.w_0, padding=[0, 0, 0, 0], channels=179, kernel_size=[1, 1]);
  %99 = nn.batch_norm(%98, %batch_norm_14.w_0, %batch_norm_14.b_0, %batch_norm_14.w_1, %batch_norm_14.w_2);
  %100 = %99.0;
  %101 = clip(%100, a_min=-3f, a_max=3f);
  %102 = divide(%101, 6f);
  %103 = add(%102, 0.5f);
  %104 = multiply(%100, %103);
  %105 = nn.conv2d(%104, %conv2d_15.w_0, padding=[2, 2, 2, 2], groups=179, channels=179, kernel_size=[5, 5]);
  %106 = nn.batch_norm(%105, %batch_norm_15.w_0, %batch_norm_15.b_0, %batch_norm_15.w_1, %batch_norm_15.w_2);
  %107 = %106.0;
  %108 = clip(%107, a_min=-3f, a_max=3f);
  %109 = divide(%108, 6f);
  %110 = add(%109, 0.5f);
  %111 = multiply(%107, %110);
  %112 = nn.conv2d(%111, %conv2d_16.w_0, padding=[0, 0, 0, 0], channels=179, kernel_size=[1, 1]);
  %113 = nn.batch_norm(%112, %batch_norm_16.w_0, %batch_norm_16.b_0, %batch_norm_16.w_1, %batch_norm_16.w_2);
  %114 = %113.0;
  %115 = clip(%114, a_min=-3f, a_max=3f);
  %116 = divide(%115, 6f);
  %117 = add(%116, 0.5f);
  %118 = multiply(%114, %117);
  %119 = nn.conv2d(%118, %conv2d_17.w_0, padding=[2, 2, 2, 2], groups=179, channels=179, kernel_size=[5, 5]);
  %120 = nn.batch_norm(%119, %batch_norm_17.w_0, %batch_norm_17.b_0, %batch_norm_17.w_1, %batch_norm_17.w_2);
  %121 = %120.0;
  %122 = clip(%121, a_min=-3f, a_max=3f);
  %123 = divide(%122, 6f);
  %124 = add(%123, 0.5f);
  %125 = multiply(%121, %124);
  %126 = nn.conv2d(%125, %conv2d_18.w_0, padding=[0, 0, 0, 0], channels=179, kernel_size=[1, 1]);
  %127 = nn.batch_norm(%126, %batch_norm_18.w_0, %batch_norm_18.b_0, %batch_norm_18.w_1, %batch_norm_18.w_2);
  %128 = %127.0;
  %129 = clip(%128, a_min=-3f, a_max=3f);
  %130 = divide(%129, 6f);
  %131 = add(%130, 0.5f);
  %132 = multiply(%128, %131);
  %133 = nn.conv2d(%132, %conv2d_19.w_0, padding=[2, 2, 2, 2], groups=179, channels=179, kernel_size=[5, 5]);
  %134 = nn.batch_norm(%133, %batch_norm_19.w_0, %batch_norm_19.b_0, %batch_norm_19.w_1, %batch_norm_19.w_2);
  %135 = %134.0;
  %136 = clip(%135, a_min=-3f, a_max=3f);
  %137 = divide(%136, 6f);
  %138 = add(%137, 0.5f);
  %139 = multiply(%135, %138);
  %140 = nn.conv2d(%139, %conv2d_20.w_0, padding=[0, 0, 0, 0], channels=179, kernel_size=[1, 1]);
  %141 = nn.batch_norm(%140, %batch_norm_20.w_0, %batch_norm_20.b_0, %batch_norm_20.w_1, %batch_norm_20.w_2);
  %142 = %141.0;
  %143 = clip(%142, a_min=-3f, a_max=3f);
  %144 = divide(%143, 6f);
  %145 = add(%144, 0.5f);
  %146 = multiply(%142, %145);
  %147 = nn.conv2d(%146, %conv2d_21.w_0, padding=[2, 2, 2, 2], groups=179, channels=179, kernel_size=[5, 5]);
  %148 = nn.batch_norm(%147, %batch_norm_21.w_0, %batch_norm_21.b_0, %batch_norm_21.w_1, %batch_norm_21.w_2);
  %149 = %148.0;
  %150 = clip(%149, a_min=-3f, a_max=3f);
  %151 = divide(%150, 6f);
  %152 = add(%151, 0.5f);
  %153 = multiply(%149, %152);
  %154 = nn.conv2d(%153, %conv2d_22.w_0, padding=[0, 0, 0, 0], channels=179, kernel_size=[1, 1]);
  %155 = nn.batch_norm(%154, %batch_norm_22.w_0, %batch_norm_22.b_0, %batch_norm_22.w_1, %batch_norm_22.w_2);
  %156 = %155.0;
  %157 = clip(%156, a_min=-3f, a_max=3f);
  %158 = divide(%157, 6f);
  %159 = add(%158, 0.5f);
  %160 = multiply(%156, %159);
  %161 = nn.conv2d(%160, %conv2d_23.w_0, strides=[2, 1], padding=[2, 2, 2, 2], groups=179, channels=179, kernel_size=[5, 5]);
  %162 = nn.batch_norm(%161, %batch_norm_23.w_0, %batch_norm_23.b_0, %batch_norm_23.w_1, %batch_norm_23.w_2);
  %163 = %162.0;
  %164 = clip(%163, a_min=-3f, a_max=3f);
  %165 = divide(%164, 6f);
  %166 = add(%165, 0.5f);
  %167 = multiply(%163, %166);
  %168 = nn.adaptive_avg_pool2d(%167, output_size=[1, 1]);
  %169 = nn.conv2d(%168, %conv2d_24.w_0, padding=[0, 0, 0, 0], channels=44, kernel_size=[1, 1]);
  %170 = expand_dims(%conv2d_24.b_0, axis=1, num_newaxis=2);
  %171 = add(%169, %170);
  %172 = nn.relu(%171);
  %173 = nn.conv2d(%172, %conv2d_25.w_0, padding=[0, 0, 0, 0], channels=179, kernel_size=[1, 1]);
  %174 = expand_dims(%conv2d_25.b_0, axis=1, num_newaxis=2);
  %175 = add(%173, %174);
  %176 = multiply(%175, 0.166667f);
  %177 = add(%176, 0.5f);
  %178 = clip(%177, a_min=0f, a_max=1f);
  %179 = multiply(%167, %178);
  %180 = nn.conv2d(%179, %conv2d_26.w_0, padding=[0, 0, 0, 0], channels=358, kernel_size=[1, 1]);
  %181 = nn.batch_norm(%180, %batch_norm_24.w_0, %batch_norm_24.b_0, %batch_norm_24.w_1, %batch_norm_24.w_2);
  %182 = %181.0;
  %183 = clip(%182, a_min=-3f, a_max=3f);
  %184 = divide(%183, 6f);
  %185 = add(%184, 0.5f);
  %186 = multiply(%182, %185);
  %187 = nn.conv2d(%186, %conv2d_27.w_0, padding=[2, 2, 2, 2], groups=358, channels=358, kernel_size=[5, 5]);
  %188 = nn.batch_norm(%187, %batch_norm_25.w_0, %batch_norm_25.b_0, %batch_norm_25.w_1, %batch_norm_25.w_2);
  %189 = %188.0;
  %190 = clip(%189, a_min=-3f, a_max=3f);
  %191 = divide(%190, 6f);
  %192 = add(%191, 0.5f);
  %193 = multiply(%189, %192);
  %194 = nn.adaptive_avg_pool2d(%193, output_size=[1, 1]);
  %195 = nn.conv2d(%194, %conv2d_28.w_0, padding=[0, 0, 0, 0], channels=89, kernel_size=[1, 1]);
  %196 = expand_dims(%conv2d_28.b_0, axis=1, num_newaxis=2);
  %197 = add(%195, %196);
  %198 = nn.relu(%197);
  %199 = nn.conv2d(%198, %conv2d_29.w_0, padding=[0, 0, 0, 0], channels=358, kernel_size=[1, 1]);
  %200 = expand_dims(%conv2d_29.b_0, axis=1, num_newaxis=2);
  %201 = add(%199, %200);
  %202 = multiply(%201, 0.166667f);
  %203 = add(%202, 0.5f);
  %204 = clip(%203, a_min=0f, a_max=1f);
  %205 = multiply(%193, %204);
  %206 = nn.conv2d(%205, %conv2d_30.w_0, padding=[0, 0, 0, 0], channels=358, kernel_size=[1, 1]);
  %207 = nn.batch_norm(%206, %batch_norm_26.w_0, %batch_norm_26.b_0, %batch_norm_26.w_1, %batch_norm_26.w_2);
  %208 = %207.0;
  %209 = clip(%208, a_min=-3f, a_max=3f);
  %210 = divide(%209, 6f);
  %211 = add(%210, 0.5f);
  %212 = multiply(%208, %211);
  %213 = nn.max_pool2d(%212, pool_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0]);
  %214 = squeeze(%213, axis=[2]);
  %215 = transpose(%214, axes=[0, 2, 1]);
  %216 = reshape(%215, newshape=[-1, 358]);
  %217 = transpose(%linear_0.w_0, axes=None);
  %218 = nn.dense(%216, %217, units=None);
  %219 = reshape(%218, newshape=[1, 80, 97]);
  %220 = add(%219, %linear_0.b_0);
  %221 = max(%220, axis=[2], keepdims=True);
  %222 = subtract(%220, %221);
  %223 = exp(%222);
  %224 = sum(%223, axis=[2], keepdims=True);
  divide(%223, %224)
}
